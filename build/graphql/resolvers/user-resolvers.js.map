{"version":3,"sources":["../../../src/graphql/resolvers/user-resolvers.js"],"names":["signup","_","ctx","fullName","rest","auth","firstName","lastName","name","split","i","length","User","findOne","email","user_existed","Error","create","user","token","createToken","login","password","console","log","authenticateUser","valid","me","args"],"mappings":"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","sourcesContent":["import User from '../../models/User';\nimport { requireAuth, requireAccess } from '../../services/auth';\n\nexport default {\n    signup: async (_, { fullName, ...rest }, ctx) => {\n        try {\n            await requireAccess(ctx.auth);\n\n            let firstName = '';\n            let lastName = '';\n            const name = fullName.split(' ');\n            for (let i = 0; i < name.length; i++) {\n                i == 0 ? (firstName = name[i]) : (lastName = lastName + ' ' + name[i]);\n            }\n\n            const user_existed = await User.findOne({ email: rest.email });\n            if (user_existed) {\n                throw new Error(`User already exist with email ${rest.email}`);\n            }\n\n            const user = await User.create({ firstName, lastName, ...rest });\n\n            return {\n                token: user.createToken(),\n                user\n            }\n        } catch (err) {\n            throw err;\n        }\n    },\n\n    login: async (_, { email, password }, ctx) => {\n        try {\n            await requireAccess(ctx.auth);\n\n            const user = await User.findOne({ email });\n            console.log(user);\n            if (!user) {\n                throw new Error('No such user found');\n            }\n            \n            const valid = await user.authenticateUser(password);\n            if (!valid) {\n                throw new Error('Invalid password');\n            }\n\n            return {\n                token: user.createToken(),\n                user\n            };\n        } catch (err) {\n            throw err;\n        }\n    },\n\n    me: async (_, args, ctx) => {\n        try {\n            const me = await requireAuth(ctx.auth);\n            return me;\n        } catch (err) {\n            throw err;\n        }\n    }\n};\n"],"file":"user-resolvers.js"}