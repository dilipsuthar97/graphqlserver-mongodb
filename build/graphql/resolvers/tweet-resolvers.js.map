{"version":3,"sources":["../../../src/graphql/resolvers/tweet-resolvers.js"],"names":["getTweet","parent","args","ctx","auth","Tweet","findById","_id","getTweets","_","find","sort","createdAt","createTweet","create","user","updateTweet","rest","findOne","tweet","Error","Object","entries","forEach","index","key","value","save","deleteTweet","remove","message","myTweets"],"mappings":"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","sourcesContent":["import Tweet from '../../models/Tweet';\nimport { requireAuth } from '../../services/auth';\n\nexport default {\n    getTweet: async (parent, args, ctx) => {\n        try {\n            await requireAuth(ctx.auth);\n            return Tweet.findById(args._id);\n        } catch (err) {\n            throw err;\n        }\n    },\n\n    getTweets: async (_, args, ctx) => {\n        try {\n            await requireAuth(ctx.auth);\n            return Tweet.find({}).sort({ createdAt: -1 });\n        } catch (err) {\n            throw err;\n        }\n    },\n\n    createTweet: async (_, args, ctx) => {\n        try {\n            await requireAuth(ctx.auth);\n            return Tweet.create({ ...args, user: ctx.auth.user._id });\n        } catch (err) {\n            throw err;\n        }\n    },\n\n    updateTweet: async (_, { _id, ...rest }, ctx) => {\n        try {\n            await requireAuth(ctx.auth)\n            const tweet = await Tweet.findOne({ _id, user: ctx.auth.user._id });\n\n            if (!tweet) {\n                throw new Error('Not found!');\n            }\n\n            Object.entries(rest).forEach(([key, value], index) => {\n                tweet[key] = value;\n            });\n\n            return tweet.save();\n        } catch (err) {\n            throw err;\n        }\n    },\n    \n    deleteTweet: async (_, { _id }, ctx) => {\n        try {\n            await requireAuth(ctx.auth);\n            const tweet = await Tweet.findOne({ _id, user: ctx.auth.user._id });\n\n            if (!tweet) {\n                throw new Error('Not found!');\n            }\n\n            tweet.remove();\n\n            return {\n                message: 'Delete Success',\n            };\n        } catch (err) {\n            throw err;\n        }\n    },\n\n    myTweets: async (_, args, ctx) => {\n        try {\n            await requireAuth(ctx.auth);\n            return Tweet.find({ user: ctx.auth.user._id }).sort({ createdAt: -1 });\n        } catch (err) {\n            throw err;\n        }\n    }\n};\n"],"file":"tweet-resolvers.js"}