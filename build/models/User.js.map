{"version":3,"sources":["../../src/models/User.js"],"names":["UserSchema","Schema","username","type","String","unique","firstName","lastName","email","password","profile","timestamps","pre","next","isModified","hashPassword","methods","bcrypt","hash","authenticateUser","compare","createToken","jwt","sign","_id","constants","JWT_SECRET","mongoose","model"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;;;;;;;;;;;AAEA,IAAMA,UAAU,GAAG,IAAIC,gBAAJ,CACf;AACIC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,IAAI,EAAEC,MADA;AAENC,IAAAA,MAAM,EAAE,IAFF;AAGN,eAAS;AAHH,GADd;AAMIC,EAAAA,SAAS,EAAEF,MANf;AAOIG,EAAAA,QAAQ,EAAEH,MAPd;AAQII,EAAAA,KAAK,EAAE;AACHL,IAAAA,IAAI,EAAEC,MADH;AAEHC,IAAAA,MAAM,EAAE;AAFL,GARX;AAYII,EAAAA,QAAQ,EAAEL,MAZd;AAaIM,EAAAA,OAAO,EAAE;AACLP,IAAAA,IAAI,EAAEC,MADD;AAEL,eAAS;AAFJ;AAbb,CADe,EAmBf;AAAEO,EAAAA,UAAU,EAAE;AAAd,CAnBe,CAAnB;AAsBAX,UAAU,CAACY,GAAX,CAAe,MAAf;AAAA,qEAAuB,iBAAeC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA,iBACf,KAAKC,UAAL,CAAgB,UAAhB,CADe;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAEO,KAAKC,YAAL,CAAkB,KAAKN,QAAvB,CAFP;;AAAA;AAEf,iBAAKA,QAFU;AAAA,6CAGRI,IAAI,EAHI;;AAAA;AAAA,6CAMZA,IAAI,EANQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAvB;;AAAA;AAAA;AAAA;AAAA;AASAb,UAAU,CAACgB,OAAX,GAAqB;AACjBD,EAAAA,YADiB,wBACJN,QADI,EACM;AACnB,WAAOQ,qBAAOC,IAAP,CAAYT,QAAZ,EAAsB,EAAtB,CAAP;AACH,GAHgB;AAIjBU,EAAAA,gBAJiB,4BAIAV,QAJA,EAIU;AACvB,WAAOQ,qBAAOG,OAAP,CAAeX,QAAf,EAAyB,KAAKA,QAA9B,CAAP;AACH,GANgB;AAOjBY,EAAAA,WAPiB,yBAOH;AACV,WAAOC,yBAAIC,IAAJ,CAAS;AAAEC,MAAAA,GAAG,EAAE,KAAKA;AAAZ,KAAT,EAA4BC,sBAAUC,UAAtC,CAAP;AACH;AATgB,CAArB;;eAYeC,qBAASC,KAAT,CAAe,MAAf,EAAuB5B,UAAvB,C","sourcesContent":["import mongoose, { Schema } from 'mongoose';\nimport bcrypt from 'bcryptjs';\nimport jwt from 'jsonwebtoken';\n\nimport constants from '../config/constants';\n\nconst UserSchema = new Schema(\n    {\n        username: {\n            type: String,\n            unique: true,\n            default: null,\n        },\n        firstName: String,\n        lastName: String,\n        email: {\n            type: String,\n            unique: true,\n        },\n        password: String,\n        profile: {\n            type: String,\n            default: null,\n        },\n    },\n    { timestamps: true },\n);\n\nUserSchema.pre('save', async function(next) {\n    if (this.isModified('password')) {\n        this.password = await this.hashPassword(this.password);\n        return next();\n    }\n\n    return next();\n});\n\nUserSchema.methods = {\n    hashPassword(password) {\n        return bcrypt.hash(password, 10);\n    },\n    authenticateUser(password) {\n        return bcrypt.compare(password, this.password);\n    },\n    createToken() {\n        return jwt.sign({ _id: this._id }, constants.JWT_SECRET);\n    }\n};\n\nexport default mongoose.model('User', UserSchema);\n"],"file":"User.js"}