{"version":3,"sources":["../../src/services/auth.js"],"names":["decodeToken","authorization","split","bearer","token","console","log","jwt","verify","constants","JWT_SECRET","err","Error","requireAccess","auth","accesskey","ACCESS_KEY","requireAuth","user","_id","User","findById","me"],"mappings":";;;;;;;AAAA;;AAEA;;AAEA;;;;;;;;;;;;;;;;;;;;AAEO,IAAMA,WAAW,GAAG,SAAdA,WAAc,CAACC,aAAD,EAAmB;AAC1C,MAAI;AAAA,+BACwBA,aAAa,CAACC,KAAd,CAAoB,GAApB,CADxB;AAAA;AAAA,QACOC,MADP;AAAA,QACeC,KADf;;AAGA,QAAID,MAAM,KAAK,QAAf,EAAyB;AACrBE,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACA,aAAOC,yBAAIC,MAAJ,CAAWJ,KAAX,EAAkBK,sBAAUC,UAA5B,CAAP;AACH;AACJ,GAPD,CAOE,OAAOC,GAAP,EAAY;AACV,UAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACH;AACJ,CAXM;;;;AAaA,IAAMC,aAAa;AAAA,qEAAG,iBAAOC,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA,kBACrB,CAACA,IAAD,IAASA,IAAI,CAACC,SAAL,IAAkBN,sBAAUO,UADhB;AAAA;AAAA;AAAA;;AAAA,kBAEf,IAAIJ,KAAJ,CAAU,qBAAV,CAFe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAbC,aAAa;AAAA;AAAA;AAAA,GAAnB;;;;AAMA,IAAMI,WAAW;AAAA,sEAAG,kBAAOH,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEnB,CAACA,IAAD,IAASA,IAAI,CAACC,SAAL,IAAkBN,sBAAUO,UAFlB;AAAA;AAAA;AAAA;;AAAA,kBAGb,IAAIJ,KAAJ,CAAU,qBAAV,CAHa;;AAAA;AAAA,kBAMnB,CAACE,IAAI,CAACI,IAAN,IAAc,CAACJ,IAAI,CAACI,IAAL,CAAUC,GANN;AAAA;AAAA;AAAA;;AAAA,kBAOb,IAAIP,KAAJ,CAAU,eAAV,CAPa;;AAAA;AAAA;AAAA,mBAUNQ,iBAAKC,QAAL,CAAcP,IAAI,CAACI,IAAL,CAAUC,GAAxB,CAVM;;AAAA;AAUjBG,YAAAA,EAViB;;AAAA,gBAWlBA,EAXkB;AAAA;AAAA;AAAA;;AAAA,kBAYb,IAAIV,KAAJ,CAAU,eAAV,CAZa;;AAAA;AAAA,8CAehBU,EAfgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAXL,WAAW;AAAA;AAAA;AAAA,GAAjB","sourcesContent":["import jwt from 'jsonwebtoken';\n\nimport User from '../models/User';\n\nimport constants from '../config/constants';\n\nexport const decodeToken = (authorization) => {\n    try {\n        const [bearer, token] = authorization.split(' ');\n\n        if (bearer === 'Bearer') {\n            console.log('decoding token...')\n            return jwt.verify(token, constants.JWT_SECRET);\n        }\n    } catch (err) {\n        throw new Error('Token not valid');\n    }\n};\n\nexport const requireAccess = async (auth) => {\n    if (!auth || auth.accesskey != constants.ACCESS_KEY) {\n        throw new Error('Invalid Access Key!');\n    }\n};\n\nexport const requireAuth = async (auth) => {\n\n    if (!auth || auth.accesskey != constants.ACCESS_KEY) {\n        throw new Error('Invalid Access Key!');\n    }\n\n    if (!auth.user || !auth.user._id) {\n        throw new Error('Unauthorized!');\n    }\n\n    const me = await User.findById(auth.user._id);\n    if (!me) {\n        throw new Error('Unauthorized!');\n    }\n\n    return me;\n};"],"file":"auth.js"}